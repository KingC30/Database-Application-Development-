-- Deliverable Three
-- Team 5

-- Team Members
-- Nandhu Unnikrishnan (Member 1)
-- Nauman Choudhary (Member 2)
-- Gia Bao Vo (Member 3)
-- Sadia Alam (Member 4)
-- Shikha Gondalia (Member 5)




set serveroutput on;

-- Drop Sequences from the database
DROP SEQUENCE order_id_seq;
DROP SEQUENCE menu_item_id_seq;
DROP SEQUENCE waiter_id_seq;
DROP SEQUENCE restaurant_id_seq;
DROP SEQUENCE cuisine_type_id_seq;
DROP SEQUENCE customer_id_seq;


--Drop Tables from the database
DROP TABLE orders;
DROP TABLE restaurant_inventory;
DROP TABLE menu_item;
DROP TABLE waiter;
DROP TABLE restaurant;
DROP TABLE cuisine_type;
DROP TABLE customer;



--Creating Customer table
CREATE TABLE customer
(
  	customer_id          	   NUMBER         NOT NULL,
  	customer_name        	   VARCHAR2(60)	NOT NULL,
  	customer_email  	   	   VARCHAR2(60)	NOT NULL,
  	customer_street      	   VARCHAR2(60),
  	customer_city        	   VARCHAR2(15),
  	customer_state       	   VARCHAR2(15),
  	customer_zip         	   VARCHAR2(10),
  	customer_credit_card       VARCHAR2(24)	NOT NULL,
	PRIMARY KEY (customer_id)
);


--Creating Cuisine Type table
CREATE TABLE cuisine_type
(
	cuisine_type_id	NUMBER	NOT NULL,
	cuisine_type_name	VARCHAR2(50) NOT NULL,
	PRIMARY KEY (cuisine_type_id)
);


--Creating Restaurant table
CREATE TABLE restaurant
(
	restaurant_id			NUMBER		NOT NULL,
	restaurant_name			VARCHAR2(50) 	NOT NULL,
	restaurant_street_address 	VARCHAR2(60)	NOT NULL,
	restaurant_city			VARCHAR2(15)	NOT NULL,
  	restaurant_state       		VARCHAR2(15)	NOT NULL,
  	restaurant_zip         		VARCHAR2(10)	NOT NULL,
	cuisine_type_id			NUMBER		NOT NULL,
	PRIMARY KEY (restaurant_id),
	FOREIGN KEY (cuisine_type_id) references cuisine_type (cuisine_type_id)
);


--Creating Waiter table
CREATE TABLE waiter
(
  	waiter_id      NUMBER         NOT NULL,
  	waiter_name    VARCHAR2(50)   NOT NULL,
	restaurant_id  NUMBER		NOT NULL,
	PRIMARY KEY (waiter_id),
	FOREIGN KEY (restaurant_id) references restaurant (restaurant_id)
);


--Creating Menu Item table
CREATE TABLE menu_item
(
	menu_item_id	NUMBER	   NOT NULL,
	menu_item_name	VARCHAR2(30)   NOT NULL,
	menu_item_price	NUMBER(5,2)	   NOT NULL,
	cuisine_type_id	NUMBER	   NOT NULL,
	PRIMARY KEY (menu_item_id),
	FOREIGN KEY (cuisine_type_id) references cuisine_type (cuisine_type_id)
);


--Creating Restaurant Inventory table
CREATE TABLE restaurant_inventory
(
	menu_item_id	 NUMBER	   NOT NULL,
	restaurant_id	 NUMBER	   NOT NULL,
	menu_item_name	 VARCHAR2(30)  NOT NULL,
	menu_item_quantity NUMBER	   NOT NULL,
	PRIMARY KEY (menu_item_id, restaurant_id),
	FOREIGN KEY (menu_item_id) references menu_item (menu_item_id),
	FOREIGN KEY (restaurant_id) references restaurant (restaurant_id)
);



--Creating Order table
CREATE TABLE orders
(
	order_id		NUMBER	NOT NULL,
	restaurant_id	NUMBER	NOT NULL,
	customer_id       NUMBER      NOT NULL,
	menu_item_id	NUMBER	NOT NULL,
	waiter_id         NUMBER      NOT NULL,
	order_date		DATE		NOT NULL,
	amount_paid		NUMBER(5,2) NOT NULL,
	tip			NUMBER(5,2),
	PRIMARY KEY (order_id),
	FOREIGN KEY (restaurant_id) references restaurant (restaurant_id),
	FOREIGN KEY (customer_id) references customer (customer_id),
	FOREIGN KEY (menu_item_id) references menu_item (menu_item_id),
	FOREIGN KEY (waiter_id) references waiter (waiter_id)
);


-- Create Sequence To Autofill Primary Key For Cuisine Table
CREATE SEQUENCE cuisine_type_id_seq
START WITH 1;

-- Create Sequence To Autofill Primary Key For Restaurant Table
CREATE SEQUENCE restaurant_id_seq
START WITH 1;

-- Create Sequence to Autofill Primary Key For Waiter Table
CREATE SEQUENCE waiter_id_seq
START WITH 1;

-- Create Sequence to Autofill Primary Key For Menu Item Table
CREATE SEQUENCE menu_item_id_seq
START WITH 1;
 
-- Create Sequence to Autofill Primary Key For Customer Table
CREATE SEQUENCE customer_id_seq
START WITH 1;

-- Create Sequence to Autofill Primary Key For Orders Table
CREATE SEQUENCE order_id_seq
START WITH 1;



-- Function To Return Cuisine Type ID For A Given Cuisine Type Name 
CREATE OR REPLACE FUNCTION FIND_CUISINE_TYPE_ID (cuisine_name IN VARCHAR2) RETURN number
IS
  cID number;
BEGIN
  dbms_output.put_line('Coder: Gia Bao Vo, Member:3');
  SELECT cuisine_type_id INTO cID 
  FROM cuisine_type 
  WHERE cuisine_type_name = cuisine_name;
  RETURN cID;
EXCEPTION
  WHEN no_data_found THEN
    dbms_output.put_line('No Cusine Type Found');
    RETURN -1;
END;
/


-- Function To Return Restaurant ID For A Given Restaurant Name 
CREATE OR REPLACE FUNCTION FIND_RESTAURANT_ID (r_name IN VARCHAR2) RETURN number
IS
  rID number;
BEGIN
  SELECT restaurant_id INTO rID 
  FROM restaurant 
  WHERE restaurant_name = r_name;
  RETURN rID;
EXCEPTION
  WHEN no_data_found THEN
    dbms_output.put_line('No Restaurant Found');
    RETURN -1;
END;
/


-- Function To Return Customer ID For A Given Customer Name 
CREATE OR REPLACE FUNCTION FIND_CUSTOMER_ID (cust_name IN VARCHAR2) RETURN number
IS
  cust_ID number;
BEGIN
  SELECT customer_id INTO cust_ID 
  FROM customer 
  WHERE customer_name = cust_name;
  RETURN cust_ID;
EXCEPTION
  WHEN no_data_found THEN
    dbms_output.put_line('No Customer Found');
    RETURN -1;
END;
/

-- Function To Return Menu Item ID For A Given Menu Item Name 
CREATE OR REPLACE FUNCTION FIND_MENU_ITEM_ID (m_name IN VARCHAR2) RETURN number
IS
  mID number;
BEGIN
  SELECT menu_item_id INTO mID 
  FROM menu_item 
  WHERE menu_item_name = m_name;
  RETURN mID;
EXCEPTION
  WHEN no_data_found THEN
    dbms_output.put_line('No Menu Found');
    RETURN -1;
END;
/


-- Function To Return Waiter ID For A Given Waiter Name 
CREATE OR REPLACE FUNCTION FIND_WAITER_ID (w_name IN VARCHAR2) RETURN number
IS
  wID number;
BEGIN
  SELECT waiter_id INTO wID 
  FROM waiter 
  WHERE waiter_name = w_name;
  RETURN wID;
EXCEPTION
  WHEN no_data_found THEN
    dbms_output.put_line('No Waiter Found');
    RETURN -1;
END;
/


-- Function To Return Menu Item Price For A Given Menu Item Name 
CREATE OR REPLACE FUNCTION FIND_MENU_ITEM_PRICE (m_name IN VARCHAR2) RETURN number
IS
  m_price number;
BEGIN
  SELECT menu_item_price INTO m_price 
  FROM menu_item 
  WHERE menu_item_name = m_name;
  RETURN m_price;
EXCEPTION
  WHEN no_data_found THEN
    dbms_output.put_line('No Menu Found');
    RETURN -1;
END;
/





-- Member 1 Nandhu Unnikrishnan's procedures

-- Create Procedure For Cuisine Type Input
CREATE OR REPLACE PROCEDURE insert_cuisine_type_name
(
		cuisine_type_name_param VARCHAR2
)
IS
    -- Declare Variable To Hold Inserted Cuisine Name Value
    var_cuisine_type_name VARCHAR2(50);
BEGIN
    -- Assign Cuisine Name Value To Variable
    var_cuisine_type_name := cuisine_type_name_param;

	dbms_output.put_line('Coder: Nandhu Unnikrishnan, Member:1');
    
    -- Insert Cuisine ID(autofilled) And Given Cuisine Name Into Cuisine Type Table
    INSERT INTO cuisine_type VALUES (cuisine_type_id_seq.nextval, var_cuisine_type_name);
   
    COMMIT;
EXCEPTION
WHEN OTHERS THEN    
    ROLLBACK;
END;
/



-- Create Procedure For Adding New Restaurant Row In Restaurant Table
CREATE OR REPLACE PROCEDURE insert_restaurant
(
	restaurant_name_param VARCHAR2,
    restaurant_street_param VARCHAR2,
	restaurant_city_param VARCHAR2,
  	restaurant_state_param VARCHAR2,
  	restaurant_zip_param VARCHAR2,
    cuisine_type_name_param VARCHAR2
)

IS
	-- Declare Variable To Hold Inserted Restaurant Table Values
	var_restaurant_name VARCHAR2(50);
	var_restaurant_street VARCHAR2(60);
	var_restaurant_city VARCHAR2(15);
	var_restaurant_state VARCHAR2(15);
	var_restaurant_zip VARCHAR2(10);
    var_cuisine_type_id NUMBER;
	
BEGIN
	-- Assign Restaurant Row Values To Variables
	var_restaurant_name := restaurant_name_param;
	var_restaurant_street := restaurant_street_param;
	var_restaurant_city := restaurant_city_param;
	var_restaurant_state := restaurant_state_param;
	var_restaurant_zip := restaurant_zip_param;
    var_cuisine_type_id := FIND_CUISINE_TYPE_ID(cuisine_type_name_param);

	dbms_output.put_line('Coder: Nandhu Unnikrishnan, Member:1');

	-- Insert Restaurant ID (autofilled) And Given Restaurant Parameters Into Restaurant Table
	INSERT INTO restaurant VALUES (restaurant_id_seq.nextval, var_restaurant_name, var_restaurant_street, var_restaurant_city, 
                                    var_restaurant_state, var_restaurant_zip, var_cuisine_type_id);

	COMMIT;
EXCEPTION
WHEN OTHERS THEN    
    ROLLBACK;
END;
/



-- Creates Procedure To Display Restaurant By Cuisine
CREATE OR REPLACE PROCEDURE restaurantInfo
	(cuisineId IN number)
IS
  CURSOR restaurant_cursor IS
    SELECT * FROM restaurant
    WHERE cuisine_type_id = cuisineId;
    restaurant_rec restaurant_cursor%rowtype; 
BEGIN
    dbms_output.put_line('Coder: Nandhu Unnikrishnan, Member:1');
    
 	FOR restaurant_rec IN restaurant_cursor
  	LOOP
  	dbms_output.put_line('Name: ' || restaurant_rec.restaurant_name);
  	dbms_output.put_line('Address: ' || restaurant_rec.restaurant_street_address || ' ' || restaurant_rec.restaurant_city || ', ' || restaurant_rec.restaurant_state || ' ' || restaurant_rec.restaurant_zip
);
 	END LOOP;
END;
/



-- Cretaes Procedure To Report Income By State
CREATE OR REPLACE PROCEDURE stateIncome
	(restaurantState IN VARCHAR2)
IS
Cursor income_cursor IS 
SELECT r.cuisine_type_id, SUM(o.amount_paid) AS total_income
FROM restaurant r, orders o
WHERE r.restaurant_id = o.restaurant_id
AND r.restaurant_state = restaurantState
GROUP BY r.cuisine_type_id;

v_cuisine_name cuisine_type.cuisine_type_name%type;
restaurant_rec income_cursor%rowtype;

BEGIN
    dbms_output.put_line('Coder: Nandhu Unnikrishnan, Member:1');
    
	FOR restaurant_rec IN income_cursor
	LOOP
	SELECT cuisine_type_name INTO v_cuisine_name
	FROM cuisine_type
	WHERE cuisine_type_id = restaurant_rec.cuisine_type_id;
	dbms_output.put_line('Cuisine Type Name: ' || v_cuisine_name);
	dbms_output.put_line('Income: ' || restaurant_rec.total_income);
	dbms_output.put_line('');
END LOOP;
END;
/





-- Member 2 Nauman Choudhary's procedures/ functions

--Hire waiter: Given all pertinent information as parameters, hire a waiter at a restaurant.  
CREATE OR REPLACE FUNCTION HIRE_WAITER (P_WAITER_NAME VARCHAR2, P_RESTAURANT_ID VARCHAR2)
   RETURN VARCHAR2
IS
BEGIN
   dbms_output.put_line('Coder: Nauman Choudhary, Member:2');
   INSERT INTO WAITER
        VALUES (WAITER_ID_SEQ.NEXTVAL, P_WAITER_NAME, P_RESTAURANT_ID);

   COMMIT;
   RETURN 'Waiter has been Register !';
end;
/



-- Show list of waiters: Given a restaurant ID show all info about each employee
CREATE OR REPLACE FUNCTION GET_RESTAURANT_NAME (R_ID NUMBER)
   RETURN VARCHAR2
IS
   V_NAME   VARCHAR2(100);
BEGIN 
    dbms_output.put_line('Coder: Nauman Choudhary, Member:2');
   SELECT RESTAURANT_NAME
     INTO V_NAME
     FROM RESTAURANT
    WHERE RESTAURANT_ID = R_ID;

   RETURN V_NAME;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN NULL;
END;
/



-- Report tips:  Show total tips by each waiter 
CREATE OR REPLACE PROCEDURE Waiter_TIPS 
AS 
    CURSOR waiter_tips_cursor IS 
        SELECT 
        waiter.waiter_id, 
        waiter.waiter_name, 
        NVL(waiter_tips.waiter_total_tip, 0) AS waiter_total_tip 
        FROM waiter 
        LEFT JOIN 
        (SELECT waiter_id, SUM(tip) AS waiter_total_tip 
        FROM orders 
        GROUP BY waiter_id) waiter_tips
        ON waiter.waiter_id=waiter_tips.waiter_id; 

    waiter_id_var        waiter.waiter_id%type; 
    waiter_name_var      waiter.waiter_name%type; 
    waiter_tip_var   orders.tip%type; 
    loop_counter_var     number; 
BEGIN
    dbms_output.put_line('Coder: Nauman Choudhary, Member:2');
    
    loop_counter_var := 0;
    OPEN waiter_tips_cursor; 
    
    DBMS_OUTPUT.PUT_LINE(RPAD('Waiter ID',20) || RPAD('Waiter Name',30) || RPAD('Total TIP Earned',20)); 
    DBMS_OUTPUT.PUT_LINE(RPAD('---------',20) || RPAD('-----------',30) || RPAD('----------------',20)); 
    LOOP 
        FETCH waiter_tips_cursor INTO waiter_id_var, waiter_name_var, waiter_tip_var; 
        EXIT WHEN waiter_tips_cursor%NOTFOUND; 
        DBMS_OUTPUT.PUT_LINE(RPAD(waiter_id_var,20) || RPAD(waiter_name_var,30) || RPAD(TO_CHAR(waiter_tip_var, 'fmL99G999G999D00'),20)); 
        loop_counter_var := loop_counter_var+1;
    END LOOP;
    CLOSE waiter_tips_cursor;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Some error occurred ... ' );

END;
/


-- Report tips by state: Show total tips earned by waiters per state
CREATE OR REPLACE PROCEDURE Waiter_St_TIPS 
AS 
    CURSOR waiter_st_tips_cursor IS 
        SELECT 
            waiter.waiter_id, 
            waiter.waiter_name, 
            waiter_tips.restaurant_state, 
            NVL(waiter_tips.waiter_total_tip, 0) AS waiter_total_tip 
        FROM waiter 
        LEFT JOIN 
        (
            SELECT waiter_id, restaurant.restaurant_state, SUM(tip) AS waiter_total_tip 
            FROM orders 
            JOIN restaurant ON orders.restaurant_id=restaurant.restaurant_id
            GROUP BY waiter_id, restaurant.restaurant_state
        ) waiter_tips 
        ON waiter.waiter_id=waiter_tips.waiter_id 
        ORDER BY waiter.waiter_id, waiter_tips.restaurant_state;

    waiter_id_var          waiter.waiter_id%type; 
    waiter_name_var        waiter.waiter_name%type; 
    restaurant_state_var   restaurant.restaurant_state%type; 
    waiter_tip_var     orders.tip%type; 
    loop_counter_var       number; 
    
BEGIN
    dbms_output.put_line('Coder: Nauman Choudhary, Member:2');
    
    loop_counter_var := 0;
    OPEN waiter_st_tips_cursor; 
    
    DBMS_OUTPUT.PUT_LINE(RPAD('Waiter ID',20) || RPAD('Waiter Name',30) || RPAD('State',20) || RPAD('Total TIP Earned',20)); 
    DBMS_OUTPUT.PUT_LINE(RPAD('---------',20) || RPAD('-----------',30) || RPAD('-----',20) || RPAD('----------------',20)); 
    LOOP 
        FETCH waiter_st_tips_cursor INTO waiter_id_var, waiter_name_var, restaurant_state_var, waiter_tip_var; 
        EXIT WHEN waiter_st_tips_cursor%NOTFOUND; 
        DBMS_OUTPUT.PUT_LINE(RPAD(waiter_id_var,20) || RPAD(waiter_name_var,30) || RPAD(restaurant_state_var,20) || RPAD(TO_CHAR(waiter_tip_var, 'fmL99G999G999D00'),20)); 
        loop_counter_var := loop_counter_var+1;
    END LOOP;
    CLOSE waiter_st_tips_cursor;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Some error occurred ... ');

END;
/







-- Member 3 Gia Bao Vo's procedures

--Add menu item to Restaurant Inventory: Given all pertinent information
--add a menu item with a given quantity to a given restaurant
--in the Restaurant Inventory table.
CREATE OR REPLACE PROCEDURE add_into_menu_items (
    menu_item_name IN VARCHAR,
    price          IN NUMBER,
    c_name         VARCHAR
) IS

BEGIN
    dbms_output.put_line('Coder: Gia Bao Vo, Member:3');
         Insert into menu_item
    ( menu_item_id,
    menu_item_name,
    menu_item_price,
    cuisine_type_id) 
         values
    (menu_item_id_seq.nextval, menu_item_name, price, c_name);

    exception 
    when others then
        dbms_output.put_line('Error Found While Inserting data');
End add_into_menu_items;
/



--Update menu item inventory: Given a restaurant id, a menu item id, along
--with a given quantity, reduce the inventory of that menu item by the amount
--specified by the quantity. This is to keep the inventory updated every time 
--there is an order of an item.

CREATE OR REPLACE PROCEDURE add_into_restaurant_inventory (
    menuID int,
    restaurantID int,
    meIT_name  IN VARCHAR,
    I_quant        IN NUMBER
) IS
   
BEGIN
    dbms_output.put_line('Coder: Gia Bao Vo, Member:3');
    INSERT into restaurant_inventory
    (menu_item_id,
    restaurant_id ,
    menu_item_name ,
    menu_item_quantity)
values
    (menuID ,
    restaurantID,
    meIT_name,
    I_quant);

 Exception
 When others Then
 dbms_output.put_line('Error Found While Inserting data');
End add_into_restaurant_inventory;
/



---Report Menu items: Generate a report to show totals of each menu item by type of cuisine.
Create or replace procedure report_OfMenues(cuisineID NUMBER)
IS
CURSOR rc IS
SELECT*FROM
Menu_item
where cuisineID = cuisine_type_id;
rec_r rc%rowtype;
BEGIN
dbms_output.put_line('Coder: Gia Bao Vo, Member:3');

for rec_r in rc loop
dbms_output.put_line('MenuItem ID : '
|| rec_r.menu_item_id
|| ' cuisine ID : '
|| rec_r.cuisine_type_id
|| ' Menu_item_name : '
|| rec_r.menu_item_name
|| ' price is : '
|| rec_r.menu_item_price);

END LOOP;
END;
/





-- Member 4 Sadia Alam's procedures


-- create procedure for order input (inserts values to the orders table)
create or replace PROCEDURE PLACE_ORDER
(
       r_name_param VARCHAR2,
       c_name_param VARCHAR2,
       m_name_param VARCHAR2,
       w_name_param VARCHAR2,
       o_date_param DATE
)
IS
    -- declare variable to hold returned values from functions
     rID number;
     cust_ID number;
     mID number;
     wID number;

     order_amount menu_item.menu_item_price%type;
     order_tip orders.tip%type;

BEGIN
    --Call functions and store returned values to variables
    rID := FIND_RESTAURANT_ID(r_name_param);
    cust_ID := FIND_CUSTOMER_ID(c_name_param);
    mID := FIND_MENU_ITEM_ID(m_name_param);
    wID := FIND_WAITER_ID(w_name_param);
    order_amount := FIND_MENU_ITEM_PRICE(m_name_param);

    order_tip := order_amount * .2;

    dbms_output.put_line('Coder: Sadia Alam, Member:4');
    -- insert cusine id(autofilled) and given cusine name into cusine type table
    INSERT INTO orders values (order_id_seq.nextval, rID, cust_ID, mID, wID, o_date_param, order_amount, order_tip);
    COMMIT;
EXCEPTION
WHEN OTHERS THEN    
    ROLLBACK;
END;
/



-- create procedure to list orders for a given restaurant on a given date
CREATE OR REPLACE PROCEDURE LIST_ORDERS
(
       r_name_param VARCHAR2,
       date_param DATE
)
IS
    cursor list_order_cursor is
    select *
    from orders
    where restaurant_id = FIND_RESTAURANT_ID(r_name_param)
    and order_date = date_param;

    -- declare variable 
     order_row list_order_cursor%rowtype;
     
BEGIN
    dbms_output.put_line('Coder: Sadia Alam, Member:4');
    
    for order_row in list_order_cursor
    loop
        dbms_output.put_line('Order ID: ' || order_row.order_id );
        dbms_output.put_line('Restaurant ID: ' || order_row.restaurant_id );
        dbms_output.put_line('Customer ID: ' || order_row.customer_id );
        dbms_output.put_line('Menu Item ID: ' || order_row.menu_item_id );
        dbms_output.put_line('Waiter ID: ' || order_row.waiter_id );
        dbms_output.put_line('Order Date: ' || order_row.order_date );
        dbms_output.put_line('Amount Paid: ' || order_row.amount_paid );
        dbms_output.put_line('Tip: ' || order_row.tip );
 	  dbms_output.put_line('' );
    end loop;

EXCEPTION
WHEN OTHERS THEN    
    dbms_output.put_line('No Order Found');
END;
/



-- create procedure to list the top 3 restaurants of a given state
create or replace PROCEDURE TOP_RESTAURANT_REPORT
(
       r_state_param VARCHAR2
)
IS
    cursor restaurant_income_cursor is
    select * from
    (select r.restaurant_name, sum (o.amount_paid) as total_income
    from restaurant r, orders o
    where r.restaurant_id = o.restaurant_id
    and r.restaurant_state = r_state_param
    group by r.restaurant_name
    order by total_income desc)
    where ROWNUM <=3;
    
    -- declare variable to hold queried values from the cursor
     income_report restaurant_income_cursor%rowtype;

BEGIN
    dbms_output.put_line('Coder: Sadia Alam, Member:4');
    
	-- fetch cursor into income_report variable
     for income_report in restaurant_income_cursor
    loop
        dbms_output.put_line('Restaurant Name: ' || income_report.restaurant_name );
        dbms_output.put_line('Restaurant Total Income: ' || income_report.total_income);
        dbms_output.put_line('' );
    end loop;
EXCEPTION
WHEN OTHERS THEN    
   dbms_output.put_line('No Restaurant Found');
END;
/



-- create procedure that displays the most popular menu of a given cuisine type
create or replace PROCEDURE MOST_POPULAR_MENU
(
       cuisine_name_param VARCHAR2
)
IS
    cursor top_menu_cursor is
    select * from
    (select m.cuisine_type_id, m.menu_item_name, count(o.menu_item_id) as popular_menu 
    from menu_item m, orders o
    where m.menu_item_id = o.menu_item_id
    and m.cuisine_type_id = FIND_CUISINE_TYPE_ID(cuisine_name_param)
    group by m.cuisine_type_id, m.menu_item_name
    order by popular_menu desc)
    where ROWNUM <=1;
    
     -- declare variable to hold queried values from the cursor
     popular_menu_report top_menu_cursor%rowtype;

BEGIN
    dbms_output.put_line('Coder: Sadia Alam, Member:4');
    
	-- fetch cursor into income_report variable
     for popular_menu_report in top_menu_cursor
    loop
        dbms_output.put_line('Cusine Name: ' || cuisine_name_param );
        dbms_output.put_line('Most Popular Menu: ' || popular_menu_report.menu_item_name);
        dbms_output.put_line('' );
    end loop;
EXCEPTION
WHEN OTHERS THEN    
   dbms_output.put_line('No Menu Found');
END;
/






-- Member 5 Shikha Gondalia's procedures and helper function

-- Creating a helper function
CREATE OR REPLACE FUNCTION FIND_CUSTOMER_NAME(P_CUSTOMER_ID IN NUMBER)
RETURN VARCHAR IS
NAME VARCHAR(60); -- VARIABLE THAT HAS TO RETURN
BEGIN
SELECT CUSTOMER_NAME INTO NAME FROM CUSTOMER WHERE CUSTOMER_ID = P_CUSTOMER_ID;
RETURN NAME;
EXCEPTION
WHEN NO_DATA_FOUND then DBMS_OUTPUT.PUT_LINE('No such customer');
RETURN NULL;
END;
/


--Creating and Insert Procedure
CREATE OR REPLACE PROCEDURE insert_customer_info
    (customer_name IN VARCHAR2, customer_email IN VARCHAR2, customer_street VARCHAR2, customer_city VARCHAR2,
    customer_state VARCHAR2, customer_zip VARCHAR2,customer_credit_card VARCHAR2) AS
    
BEGIN
dbms_output.put_line('Coder: Shikha Gondalia, Member:5');
INSERT INTO
    customer(customer_id,customer_name,customer_email,customer_street,customer_city,customer_state,customer_zip,customer_credit_card)
    VALUES(customer_id_seq.nextval,customer_name,customer_email,customer_street,customer_city,customer_state,customer_zip,
    customer_credit_card);
    
END insert_customer_info;
/
    


--Creating a cursor to list customer names with their zip code
CREATE OR REPLACE PROCEDURE customer_zip(zip IN customer.customer_zip%TYPE)
IS
CURSOR C1 IS
    SELECT customer_name, zip
    FROM customer 
    WHERE zip = customer_zip; --Creating a cursor
    BEGIN
    dbms_output.put_line('Coder: Shikha Gondalia, Member:5');
    FOR item IN C1 --For loop to iterate through customer table
    LOOP
        dbms_output.put_line(item.customer_name); --Prints out a customer name 
    END LOOP;
    EXCEPTION -- Exception handling
        WHEN no_data_found then dbms_output.put_line('No data found');
        WHEN OTHERS THEN dbms_output.put_line('Error');
        COMMIT;
END;
/



-- Creating a procedure for customers who spent the most money (top 3)
CREATE OR REPLACE PROCEDURE HIGHEST_PAYING_CUSTOMERS
IS
CURSOR HPC 
-- Select statement that returns the top 3 customers
     IS SELECT * FROM (SELECT CUSTOMER_ID, SUM(AMOUNT_PAID) AS TOTAL_PAID
            FROM ORDERS
            GROUP BY CUSTOMER_ID
            ORDER BY TOTAL_PAID)
            WHERE ROWNUM <= 3; 
            
NAME VARCHAR2(60);
BEGIN
dbms_output.put_line('Coder: Shikha Gondalia, Member:5');
FOR ITEM IN HPC
LOOP
NAME:= FIND_CUSTOMER_NAME(ITEM.CUSTOMER_ID);
        DBMS_OUTPUT.PUT_LINE(NAME);
EXIT WHEN HPC%NOTFOUND;
END LOOP;
EXCEPTION -- Exception handling
WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('NO DATA FOUND');
WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ERROR');
COMMIT;
END;
/



-- Creating procedure for customers who are the most frugal (bottom 3)
CREATE OR REPLACE PROCEDURE LOWEST_PAYING_CUSTOMERS
IS
CURSOR LPC
-- Select statement that returns the bottom 3 customers
    IS SELECT * FROM (SELECT CUSTOMER_ID, SUM(AMOUNT_PAID) AS TOTAL_PAID
        FROM ORDERS 
        GROUP BY CUSTOMER_ID 
        ORDER BY TOTAL_PAID DESC)
        WHERE ROWNUM <= 3;
        

NAME VARCHAR2(60);
BEGIN
dbms_output.put_line('Coder: Shikha Gondalia, Member:5');
FOR ITEM IN LPC
LOOP
NAME:= FIND_CUSTOMER_NAME(ITEM.CUSTOMER_ID);
        DBMS_OUTPUT.PUT_LINE(NAME);
EXIT WHEN LPC%NOTFOUND;
END LOOP;
EXCEPTION -- exception handling
WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('NO DATA FOUND');
WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ERROR');
COMMIT;
END;
/



-- Creating a procedure to print the state of customer in desc order according to their tips 
CREATE OR REPLACE PROCEDURE TIPS_BY_STATE
IS
-- Creating cursor to join customer table and orders table
CURSOR TIPS_CURSOR IS SELECT CUSTOMER_STATE,SUM(ORDERS.TIP) AS TOTAL_TIPS
    FROM ORDERS 
    JOIN CUSTOMER
    ON CUSTOMER.CUSTOMER_ID = ORDERS.CUSTOMER_ID 
    GROUP BY CUSTOMER_STATE 
    ORDER BY TOTAL_TIPS DESC;
    
BEGIN
dbms_output.put_line('Coder: Shikha Gondalia, Member:5');
    DBMS_OUTPUT.PUT_LINE('STATES TIP AMOUNT:');
FOR ITEM IN TIPS_CURSOR
LOOP
    DBMS_OUTPUT.PUT_LINE(ITEM.CUSTOMER_STATE ||': $'|| ITEM.TOTAL_TIPS); -- to print customer state and total tip 
EXIT WHEN TIPS_CURSOR%NOTFOUND; -- Loop condition
END LOOP;
EXCEPTION -- Exception handling
WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('NO DATA FOUND');
WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ERROR');
COMMIT;
END;
/





-- PL/SQL code starts here
DECLARE 
V_OUTPUT VARCHAR2(200);
BEGIN
-- Insert Cuisine Type names Into cusine_type table calling the insert_cuisine_type_name procedure
insert_cuisine_type_name('American');
insert_cuisine_type_name('Indian');
insert_cuisine_type_name('Italian');
insert_cuisine_type_name('BBQ');
insert_cuisine_type_name('Ethiopian');


--Insert Values Into Customers Table
insert_customer_info('Joe Thomas','joethomas1@gmail.com','Singers Way','Elkridge','MD','21075','7834-3921-0987-4532');
insert_customer_info('Payal Patel','payalpatel876@gmail.com','Abbey Road','Ellicott City','MD','21043','0987-3431-9343-9481');
insert_customer_info('Megan Reed','meganreed043@gmail.com','Dobbin Road','San Diego','CA','92014','0912-9321-9310-8764');
insert_customer_info('Abby Miller','abbeymiller021@gmail.com','Lark Lane','Arlington','VA','20350','4312-8723-3210-0961');
insert_customer_info('Emily Diaz','emilydiaz01@gmail.com','Woodstock Way','Ellicott City','MD','21043','2313-9834-3491-0431');
insert_customer_info('Leo Smith','leosmith892@gmail.com','Blackwell Lane','Cleveland','OH','44101','8734-4091-3231-3203');
insert_customer_info('Anjali Shah','anjalishah2@gmail.com','Blueberry Way','Mclean','VA','22106','9736-0123-9873-2134');
insert_customer_info('Rick Novak','ricknovak632@gmail.com','Buttercup Way','Los Angeles','CA','90005','7643-8903-2189-0765');
insert_customer_info('Emma Smith','emmasmith77@gmail.com','Burns Drive','Atlanta','GA','30305','0723-3213-1232-3241');
insert_customer_info('Noah Barnett','noahbarnett70@gmail.com','Clark Court','Los Angeles','CA','90005','8976-3432-0981-3432');
insert_customer_info('Nandhu','n72@umbc.edu','13121 Serpentine Way','Silver Spring','MD','20904','7122-2905-1900-1257');
insert_customer_info('John Carter', 'jcarter@gmail.com', '101 River Park DR', 'Baltimore', 'MD', '20821', '1000-2000-3000-4000');
insert_customer_info('Maya Erickson', 'merickson@gmail.com', '102 River Park DR', 'Baltimore', 'MD', '20821', '1001-2001-3001-4001');


-- Insert Restaurants Into restaurant table calling the insert_restaurant procedure
insert_restaurant('Subway', '5520 Research Park Dr Suite 107', 'Catonsville', 'MD', '21228', 'American');
insert_restaurant('HotDawg', '21 Westcott ', 'Liverpool', 'CA', 'l4156', 'Italian');
insert_restaurant('Pizza Palace', '45 Eastdoor ', 'New York City', 'NY','12307', 'Italian');
insert_restaurant('Windows Cookies', '99 Southeast ', 'New York City', 'NY','98425', 'American');
insert_restaurant('Donald', '1234', 'germantown','NY','12230', 'Ethiopian');
insert_restaurant('rubby', '23456', 'hewlett','MD', '32124', 'BBQ');
insert_restaurant('Chick-fil-A', '100 Hiltop Circle', 'Baltimore', 'MD', '20904','American');
insert_restaurant('Kabob Place', '200 Melody Dr', 'Baltimore', 'MD', '20904', 'Indian');


-- Insert menus Into menu_item table calling the add_into_menu_items procedure
add_into_menu_items('burger', 12,find_cuisine_type_id('Italian'));
add_into_menu_items('fries', 4,find_cuisine_type_id('Italian'));
add_into_menu_items('pasta', 17,find_cuisine_type_id('Italian'));
add_into_menu_items('salad', 8,find_cuisine_type_id('Italian'));
add_into_menu_items('salmon', 16,find_cuisine_type_id('Italian'));
add_into_menu_items('lasagna', 25,find_cuisine_type_id('Italian'));
add_into_menu_items('meatballs', 11,find_cuisine_type_id('Italian'));
add_into_menu_items('spaghetti', 14,find_cuisine_type_id('Italian'));
add_into_menu_items('pizza', 35,find_cuisine_type_id('Italian'));
    
add_into_menu_items('wings', 13, find_cuisine_type_id('American'));
add_into_menu_items('icecream', 5, find_cuisine_type_id('American'));
add_into_menu_items('steak', 20, find_cuisine_type_id('American'));
add_into_menu_items('nuggets', 12, find_cuisine_type_id('American'));
add_into_menu_items('subs', 18, find_cuisine_type_id('American'));
add_into_menu_items('sushi', 22, find_cuisine_type_id('American'));
add_into_menu_items('tacos', 11, find_cuisine_type_id('American'));
add_into_menu_items('soup', 23, find_cuisine_type_id('American'));
add_into_menu_items('mcarronnie', 15, find_cuisine_type_id('American'));
add_into_menu_items('Turkey Sub', 6.99, find_cuisine_type_id('American'));
add_into_menu_items('3 Pack Sugar Cookies', 1.00, find_cuisine_type_id('American'));
add_into_menu_items('Chips', 1.00, find_cuisine_type_id('American'));

add_into_menu_items('Tandoori Chicken', 5.99, find_cuisine_type_id('Indian'));
add_into_menu_items('Samosa', 2.99, find_cuisine_type_id('Indian')); 


-- Insert waiter name Into waiter table calling the HIRE_WAITER function
 V_OUTPUT := HIRE_WAITER('Nauman',FIND_RESTAURANT_ID('HotDawg'));
dbms_output.put_line('Waiter has been registered!');
 V_OUTPUT := HIRE_WAITER('Bao',FIND_RESTAURANT_ID('HotDawg'));
dbms_output.put_line('Waiter has been registered!');
 V_OUTPUT := HIRE_WAITER('Nandhu',FIND_RESTAURANT_ID('Pizza Palace'));
dbms_output.put_line('Waiter has been registered!');
V_OUTPUT := HIRE_WAITER('Sadia',FIND_RESTAURANT_ID('Windows Cookies'));
dbms_output.put_line('Waiter has been registered!');
V_OUTPUT := HIRE_WAITER('Shikha',FIND_RESTAURANT_ID('Pizza Palace'));
dbms_output.put_line('Waiter has been registered!');
 V_OUTPUT := HIRE_WAITER('John',FIND_RESTAURANT_ID('Subway'));
dbms_output.put_line('Waiter has been registered!');
V_OUTPUT := HIRE_WAITER('Marry Johnson', FIND_RESTAURANT_ID('Chick-fil-A'));
dbms_output.put_line('Waiter has been registered!');
V_OUTPUT := HIRE_WAITER('Tony Parker', FIND_RESTAURANT_ID('Kabob Place'));
dbms_output.put_line('Waiter has been registered!');


-- Insert values Into restaurant_inventory table calling the add_into_restaurant_inventory procedure 
add_into_restaurant_inventory(find_menu_item_id('burger'),find_restaurant_id('Donald'), 'burger', 50);
add_into_restaurant_inventory(find_menu_item_id('fries'),find_restaurant_id('Donald'), 'fries', 150);
add_into_restaurant_inventory(find_menu_item_id('lasagna'),find_restaurant_id('rubby'), 'lasagna', 10);
add_into_restaurant_inventory(find_menu_item_id('meatballs'),find_restaurant_id('rubby'), 'meatballs', 5);


--Insert orders Into orders table calling the PLACE_ORDER procedure 
PLACE_ORDER('Chick-fil-A', 'John Carter', 'burger', 'Marry Johnson', To_DATE('01-NOV-22', 'DD-MON-RR'));
PLACE_ORDER('Chick-fil-A', 'John Carter', 'fries', 'Marry Johnson', To_DATE('01-NOV-22', 'DD-MON-RR'));
PLACE_ORDER('Chick-fil-A', 'Maya Erickson', 'burger', 'Marry Johnson', To_DATE('06-NOV-22', 'DD-MON-RR'));
PLACE_ORDER('Kabob Place', 'John Carter', 'Tandoori Chicken', 'Tony Parker', To_DATE('10-NOV-22', 'DD-MON-RR'));
PLACE_ORDER('Kabob Place', 'Maya Erickson', 'Tandoori Chicken', 'Tony Parker',To_DATE('13-NOV-22', 'DD-MON-RR'));
PLACE_ORDER('Subway', 'Nandhu', 'Turkey Sub', 'John', To_DATE('20-NOV-22', 'DD-MON-RR'));
PLACE_ORDER('Subway', 'Nandhu', '3 Pack Sugar Cookies', 'John', To_DATE('20-NOV-22', 'DD-MON-RR'));
PLACE_ORDER('Subway', 'Nandhu', 'Chips', 'John', To_DATE('20-NOV-22', 'DD-MON-RR'));
PLACE_ORDER('Kabob Place', 'Leo Smith', 'Tandoori Chicken', 'Tony Parker',To_DATE('15-NOV-22', 'DD-MON-RR'));
PLACE_ORDER('Kabob Place', 'Anjali Shah', 'Tandoori Chicken', 'Tony Parker',To_DATE('16-NOV-22', 'DD-MON-RR'));
PLACE_ORDER('Chick-fil-A', 'Rick Novak', 'burger', 'Marry Johnson', To_DATE('19-NOV-22', 'DD-MON-RR'));
PLACE_ORDER('Chick-fil-A', 'Noah Barnett', 'burger', 'Marry Johnson', To_DATE('21-NOV-22', 'DD-MON-RR'));


-- Calling Procedure restaurantInfo To Display Restaurant By Cuisine_ID
restaurantInfo(1);

-- Calling Procedure stateIncome To generate Income report By State per cusine_type
stateIncome('MD');

--Calling Procedure to show total tips by each waiter. 
Waiter_TIPS;

--Calling Procedure to show total tips earned by waiters per state.
Waiter_St_TIPS;

--Calling Procedure to show totals of each menu item by type of cuisine. 
report_OfMenues(find_cuisine_type_id('Italian'));
report_OfMenues( find_cuisine_type_id('American'));

-- execute list orders procedure to list all orders for a given restaurant on a given date
LIST_ORDERS ('Chick-fil-A', To_DATE('01-NOV-22', 'DD-MON-RR'));


-- execute MOST_POPULAR_MENU procedure to display the most popular menu of a given cuisine type
MOST_POPULAR_MENU('Indian');

-- execute TOP_RESTAURANT_REPORT procedure to list the top 3 restaurants of a given state
TOP_RESTAURANT_REPORT('MD');


-- Calling procedure to list customers by a given zip code
customer_zip('21043');

-- Calling procedure to list top 3 and bottom 3 customers
DBMS_OUTPUT.PUT_LINE('HIGHEST PAYING CUSTOMERS:');
HIGHEST_PAYING_CUSTOMERS;
     DBMS_OUTPUT.PUT_LINE('LOWEST PAYING CUSTOMERS');
LOWEST_PAYING_CUSTOMERS;

-- Calling procedure to generate a generous customer report
TIPS_BY_STATE;

end;
/


SELECT WAITER_ID, WAITER_NAME,  
GET_RESTAURANT_NAME(RESTAURANT_ID)RESTAURANT_NAME  
FROM WAITER;
select * from restaurant;


commit;
